apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26

    defaultConfig {
        applicationId "com.convoenglishllc.expression"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 10303
        versionName "1.3.3"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file('../key/eng_conversation.jks')
            keyAlias 'alias'
            storePassword 'not_password'
            keyPassword 'not_password'
        }
    }

    buildTypes {
        debug {
            //applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.github.markushi:circlebutton:1.1'
    implementation 'com.yqritc:recyclerview-flexibledivider:1.2.6'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.balysv:material-ripple:1.0.2'
    implementation 'me.zhanghai.android.materialprogressbar:library:1.1.4'
    implementation 'com.google.android.gms:play-services-ads:15.0.1'
    implementation 'com.inthecheesefactory.thecheeselibrary:stated-fragment-support-v4:0.9.3'
    implementation 'com.google.firebase:firebase-core:15.0.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation 'com.google.firebase:firebase-ads:15.0.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    testImplementation 'junit:junit:4.12'

}


def loadKeyStorePassword(flavor, prop) {
    def propsFile = rootProject.file(prop)

    if (propsFile.exists() && android.signingConfigs.hasProperty(flavor)) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        android.signingConfigs[flavor].keyAlias = props['keyAlias']
        android.signingConfigs[flavor].keyPassword = props['keyPassword']
        android.signingConfigs[flavor].storePassword = props['storePassword']
    } else {
        println "Please create talkenglish_${flavor}.properties with storePassword and keyPassword."
    }
}

allprojects {
    afterEvaluate { project ->
        loadKeyStorePassword("release", "key/eng_conversation.properties")
    }
}

def archivePath = file("${rootDir}/archive")

def archiveTask = tasks.create(name: 'archive') {
    group 'Build'
    description "Assembles and archives all Release builds"
}

def getPackageName(variant) {
    return "EngConversation"
}

android.applicationVariants.all { variant ->

//    if (variant.buildType.name == 'release') {
//        variant.outputs.each { output ->
//            output.outputFileName = new File(output.outputFile.parent, output.outputFile.name.replace("app-release.apk", "EngConversation-${variant.versionName}.apk"))
//        }
//    }

    variant.outputs.all {
        outputFileName = "${variant.name}-${variant.versionName}.apk"
    }
}




apply plugin: 'com.google.gms.google-services'
